import nerd.tuxmobil.fahrplan.congress.Android
import nerd.tuxmobil.fahrplan.congress.Compose
import nerd.tuxmobil.fahrplan.congress.Config
import nerd.tuxmobil.fahrplan.congress.Libs

ext.set("APP_VERSION", "${gitSha()}")

apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "com.google.devtools.ksp"
apply plugin: "de.mobilej.unmock"
apply plugin: "com.getkeepsafe.dexcount"
apply from: "../gradle/sonarqube.gradle"

android {
    namespace "nerd.tuxmobil.fahrplan.congress"

    compileSdk Android.compileSdkVersion
    buildToolsVersion = Android.buildToolsVersion

    defaultConfig {
        versionCode 1700017
        versionName "1.8.17"
        minSdk Android.minSdkVersion
        targetSdk Android.targetSdkVersion
        archivesBaseName = "Fahrplan-$versionName"

        vectorDrawables.useSupportLibrary = true // allows using fillColor, fillType, strokeColor functionalities below Android 7.0 (API 24)

        // Build information
        resValue("string", "build_time", "\"${buildTime()}\"")
        resValue("string", "git_sha", "\"${gitSha()}\"")

        // Build configuration / feature flags
        buildConfigField "String", "F_DROID_URL", '"https://f-droid.org/packages/at.linuxtage.Eventfahrplan/"'
        buildConfigField "String", "TRANSLATION_PLATFORM_URL", '"https://crowdin.com/project/eventfahrplan"'
        buildConfigField "String", "SOURCE_CODE_URL", '"https://github.com/linuxtage/EventFahrplan"'
        buildConfigField "String", "ISSUES_URL", '"https://github.com/EventFahrplan/EventFahrplan/issues"'
        buildConfigField "String", "DATA_PRIVACY_STATEMENT_DE_URL", '"https://github.com/EventFahrplan/EventFahrplan/blob/master/DATA-PRIVACY-DE.md"'
        buildConfigField "String", "EVENT_POSTAL_ADDRESS", '""'
        buildConfigField "boolean", "ENGAGE_C3NAV_APP_INSTALLATION", "false"
        buildConfigField "String", "C3NAV_URL", '""'
        buildConfigField "boolean", "ENABLE_ALTERNATIVE_SCHEDULE_URL", "false"
        buildConfigField "boolean", "ENABLE_CHAOSFLIX_EXPORT", "false"
        buildConfigField "boolean", "ENABLE_ENGELSYSTEM_SHIFTS", "false"
        resValue("string", "engelsystem_alias", "Engelsystem")
        resValue("string", "engelsystem_shifts_alias", "Engelshifts")
        resValue("string", "preference_hint_engelsystem_json_export_url", '""')
        buildConfigField "boolean", "SHOW_APP_DISCLAIMER", "true"
        buildConfigField "boolean", "ENGAGE_GOOGLE_BETA_TESTING", "true"
        buildConfigField "boolean", "ENGAGE_GOOGLE_PLAY_RATING", "true"
        buildConfigField "boolean", "ENGAGE_LANDSCAPE_ORIENTATION", "true"
    }

    buildFeatures {
        buildConfig true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = Compose.Versions.compiler
    }

    buildTypes {
        debug {
            versionNameSuffix "-DEBUG"
            applicationIdSuffix ".debug"
            debuggable true
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"),
                    "proguard-rules/proguard-project.txt",
                    "proguard-rules/okhttp3.pro",
                    "proguard-rules/okio.pro"
        }
    }

    signingConfigs {
        glt22
    }

    def defaultDimension = "default"
    flavorDimensions = [defaultDimension]

    productFlavors {
        glt22 {
            dimension defaultDimension
            applicationId "at.linuxtage.Eventfahrplan"
            versionName "${defaultConfig.versionName}-glt-Edition"
            buildConfigField "String", "GOOGLE_PLAY_URL", '"https://play.google.com/store/apps/details?id=at.linuxtage.Eventfahrplan"'
            buildConfigField "String", "F_DROID_URL", '"https://f-droid.org/packages/at.linuxtage.Eventfahrplan/"'
            buildConfigField "String", "SCHEDULE_URL", '"https://pretalx.linuxtage.at/glt24/schedule/export/schedule.xml"'
            buildConfigField "String", "EVENT_URL", '""'
            buildConfigField "String", "EVENT_WEBSITE_URL", '"https://www.linuxtage.at"'
            buildConfigField "String", "EVENT_POSTAL_ADDRESS", '"Inffeldgasse 25d, 8010 Graz"'
            buildConfigField "String", "SERVER_BACKEND_TYPE", '"pretalx"'
            buildConfigField "int", "SCHEDULE_FIRST_DAY_START_YEAR", "2024"
            buildConfigField "int", "SCHEDULE_FIRST_DAY_START_MONTH", "4"
            buildConfigField "int", "SCHEDULE_FIRST_DAY_START_DAY", "5"
            buildConfigField "int", "SCHEDULE_LAST_DAY_END_YEAR", "2024"
            buildConfigField "int", "SCHEDULE_LAST_DAY_END_MONTH", "4"
            buildConfigField "int", "SCHEDULE_LAST_DAY_END_DAY", "6"
            buildConfigField "boolean", "SHOW_APP_DISCLAIMER", "true"
            buildConfigField "boolean", "ENABLE_ALTERNATIVE_SCHEDULE_URL", "false"
            buildConfigField "boolean", "ENGAGE_C3NAV_APP_INSTALLATION", "false"
            buildConfigField "boolean", "ENGAGE_GOOGLE_BETA_TESTING", "true"
            buildConfigField "boolean", "ENGAGE_GOOGLE_PLAY_RATING", "true"
            buildConfigField "boolean", "ENABLE_CHAOSFLIX_EXPORT", "true"
            buildConfigField "boolean", "ENABLE_ENGELSYSTEM_SHIFTS", "false"
            resValue("string", "preference_hint_engelsystem_json_export_url", '"https://engel.linuxtage.at/shifts-json-export?key=YOUR_KEY"')
            buildConfigField "String", "SOCIAL_MEDIA_HASHTAGS_HANDLES", '"#glt24 #glt @linuxtage @gltlive"'
            buildConfigField "String", "TRACE_DROID_EMAIL_ADDRESS", '"glt24@linuxtage.at"'
            buildConfigField "String", "SCHEDULE_FEEDBACK_URL", '"https://pretalx.linuxtage.at/glt24/talk/%s/feedback/"' //TODO change to NN
        }
    }

    productFlavors.configureEach { flavor ->
        if (hasSigningConfig(flavor.name)) {
            setSigningConfig(flavor)
        }
    }

    lint {
        checkDependencies true
        // for okio - https://github.com/square/okio/issues/58
        warning "InvalidPackage"
        warning "MissingDefaultResource"
    }

    compileOptions {
        targetCompatibility Config.compatibleJavaVersion
        sourceCompatibility Config.compatibleJavaVersion
    }

    kotlinOptions {
        jvmTarget = Config.compatibleJavaVersion
        freeCompilerArgs = [
                "-opt-in=kotlin.RequiresOptIn"
        ]
    }
}

unMock {
    keepStartingWith "libcore."
    keepStartingWith "org.ccil.cowan.tagsoup."
    keep "android.content.ComponentName"
    keep "android.content.ContentValues"
    keep "android.content.Intent"
    keep "android.net.Uri"
    keepStartingWith "android.text."
    keep "android.os.Bundle"
    keep "android.util.Patterns"
    keep "com.android.internal.util.ArrayUtils"
    keepAndRename "java.nio.charset.Charsets" to "xjava.nio.charset.Charsets"
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

dependencies {
    implementation project(":commons")
    implementation project(":database")
    implementation project(":network")
    implementation project(":engelsystem")

    def composeBom = platform(Compose.bom)
    implementation composeBom

    // Android Studio preview support
    implementation Compose.uiToolingPreview
    debugImplementation Compose.uiTooling

    implementation Compose.material

    implementation Libs.appCompat
    implementation Libs.betterLinkMovementMethod
    implementation Libs.constraintLayout
    implementation Libs.coreKtx
    implementation Libs.emailIntentBuilder
    implementation Libs.kotlinCoroutinesAndroid
    implementation Libs.kotlinCoroutinesCore
    implementation Libs.lifecycleViewModel
    implementation Libs.markwonCore
    implementation Libs.markwonLinkify
    implementation Libs.material
    implementation Libs.moshi
    ksp Libs.moshiCodeGen
    implementation Libs.okhttp
    implementation Libs.okhttpLoggingInterceptor
    implementation Libs.preference
    implementation Libs.snackengagePlayrate
    implementation Libs.tracedroid

    testImplementation project(":commons-testing")
    testImplementation Libs.annotation
    testImplementation Libs.coreTesting
    testImplementation Libs.junitJupiterApi
    testRuntimeOnly Libs.junitJupiterEngine
    testImplementation Libs.junitJupiterParams
    testImplementation(Libs.kotlinCoroutinesTest) {
        // workaround for https://github.com/Kotlin/kotlinx.coroutines/issues/2023
        exclude group: "org.jetbrains.kotlinx", module: "kotlinx-coroutines-debug"
    }
    testImplementation Libs.threeTenBp
    testImplementation Libs.truth
    testImplementation Libs.turbine

    unmock Libs.robolectric
}

def gitSha() {
    def res = "git rev-parse --short HEAD".execute([], project.rootDir).text.trim()
    def diff = "git diff".execute([], project.rootDir).text.trim()
    if (diff != null && diff.length() > 0) {
        res += "-dirty"
    }
    return res
}

static def buildTime() {
    return new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))
}

def hasSigningConfig(String flavor) {
    return project.hasProperty("signing.$flavor-release.keystoreFilePath") &&
            project.hasProperty("signing.$flavor-release.keystorePassword") &&
            project.hasProperty("signing.$flavor-release.keyAlias") &&
            project.hasProperty("signing.$flavor-release.keyPassword")
}

def setSigningConfig(flavor) {
    def flavorName = flavor.name
    def props = project.getProperties()

    def signingConfig = android.signingConfigs[flavorName]
    signingConfig.storeFile file(props["signing.$flavorName-release.keystoreFilePath"])
    signingConfig.storePassword props["signing.$flavorName-release.keystorePassword"]
    signingConfig.keyAlias props["signing.$flavorName-release.keyAlias"]
    signingConfig.keyPassword props["signing.$flavorName-release.keyPassword"]

    flavor.signingConfig = signingConfig
}
