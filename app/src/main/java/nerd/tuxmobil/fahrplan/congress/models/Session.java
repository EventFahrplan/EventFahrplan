package nerd.tuxmobil.fahrplan.congress.models;

import static java.util.Collections.emptyList;
import static info.metadude.android.eventfahrplan.commons.temporal.Moment.MILLISECONDS_OF_ONE_MINUTE;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.util.ObjectsCompat;

import org.threeten.bp.ZoneOffset;

import java.util.List;

import info.metadude.android.eventfahrplan.commons.temporal.Moment;
import info.metadude.android.eventfahrplan.network.serialization.FahrplanParser;
import nerd.tuxmobil.fahrplan.congress.repositories.SessionsTransformer;
import nerd.tuxmobil.fahrplan.congress.schedule.Conference;

/**
 * Application model representing a lecture, a workshop or any similar time-framed happening.
 */
public class Session {

    @NonNull
    public String title;
    @NonNull
    public String subtitle;
    @Nullable
    public String feedbackUrl;          // URL to Frab/Pretalx feedback system, e.g. feedbackUrl = "https://talks.event.net/2023/talk/V8LUNA/feedback"
    @NonNull
    public String url;
    public int dayIndex;                // XML values start with 1
    @NonNull
    public String dateText;             // YYYY-MM-DD
    public long dateUTC;                // milliseconds
    @Nullable
    public ZoneOffset timeZoneOffset;
    public int startTime;               // minutes since day start
    public int relStartTime;            // minutes since conference start
    public int duration;                // minutes

    @NonNull
    public String roomName;
    @NonNull
    public String roomIdentifier;       // Unique identifier of a room, e.g. "bccb6a5b-b26b-4f17-90b9-b5966f5e34d8"

    /**
     * The value of this field is generated by {@link FahrplanParser} when parsing the schedule. It contributes to how
     * the rooms are sorted in the user interface, see {@link SessionsTransformer}. But it should not be used by any
     * other code!
     */
    @Deprecated
    public int roomIndex;

    @NonNull
    public List<String> speakers;
    @NonNull
    public String track;
    public String sessionId;
    @NonNull
    public String type;
    @NonNull
    public String language;
    @NonNull
    public String slug;
    @NonNull
    public String abstractt;
    @NonNull
    public String description;

    /**
     * Comma separated Markdown formatted links, see ParserTask#parseFahrplan.
     */
    @NonNull
    public String links;

    public boolean highlight;
    public boolean hasAlarm;

    @NonNull
    public String recordingLicense;
    public boolean recordingOptOut;

    public boolean changedTitle;
    public boolean changedSubtitle;
    public boolean changedRoomName;
    public boolean changedDayIndex;
    public boolean changedStartTime;
    public boolean changedDuration;
    public boolean changedSpeakers;
    public boolean changedRecordingOptOut;
    public boolean changedLanguage;
    public boolean changedTrack;
    public boolean changedIsNew;
    public boolean changedIsCanceled;

    private static final boolean RECORDING_OPTOUT_OFF = false;

    public Session(String sessionId) {
        title = "";
        subtitle = "";
        feedbackUrl = null;
        url = "";
        dayIndex = 0;
        roomName = "";
        roomIdentifier = "";
        slug = "";
        startTime = 0;
        duration = 0;
        speakers = emptyList();
        track = "";
        type = "";
        language = "";
        abstractt = "";
        description = "";
        relStartTime = 0;
        links = "";
        dateText = "";
        this.sessionId = sessionId;
        highlight = false;
        hasAlarm = false;
        dateUTC = 0;
        timeZoneOffset = null;
        roomIndex = 0;
        recordingLicense = "";
        recordingOptOut = RECORDING_OPTOUT_OFF;
        changedTitle = false;
        changedSubtitle = false;
        changedRoomName = false;
        changedDayIndex = false;
        changedSpeakers = false;
        changedRecordingOptOut = false;
        changedLanguage = false;
        changedTrack = false;
        changedIsNew = false;
        changedStartTime = false;
        changedDuration = false;
        changedIsCanceled = false;
    }

    public Session(@NonNull Session session) {
        this.title = session.title;
        this.subtitle = session.subtitle;
        this.feedbackUrl = session.feedbackUrl;
        this.url = session.url;
        this.dayIndex = session.dayIndex;
        this.dateText = session.dateText;
        this.dateUTC = session.dateUTC;
        this.timeZoneOffset = session.timeZoneOffset;
        this.startTime = session.startTime;
        this.relStartTime = session.relStartTime;
        this.duration = session.duration;
        this.roomName = session.roomName;
        this.roomIdentifier = session.roomIdentifier;
        this.roomIndex = session.roomIndex;
        this.speakers = session.speakers;
        this.track = session.track;
        this.sessionId = session.sessionId;
        this.type = session.type;
        this.language = session.language;
        this.slug = session.slug;
        this.abstractt = session.abstractt;
        this.description = session.description;
        this.links = session.links;
        this.highlight = session.highlight;
        this.hasAlarm = session.hasAlarm;
        this.recordingLicense = session.recordingLicense;
        this.recordingOptOut = session.recordingOptOut;

        this.changedTitle = session.changedTitle;
        this.changedSubtitle = session.changedSubtitle;
        this.changedRoomName = session.changedRoomName;
        this.changedDayIndex = session.changedDayIndex;
        this.changedStartTime = session.changedStartTime;
        this.changedDuration = session.changedDuration;
        this.changedSpeakers = session.changedSpeakers;
        this.changedRecordingOptOut = session.changedRecordingOptOut;
        this.changedLanguage = session.changedLanguage;
        this.changedTrack = session.changedTrack;
        this.changedIsNew = session.changedIsNew;
        this.changedIsCanceled = session.changedIsCanceled;
    }

    /**
     * Returns a moment based on the start time milliseconds.
     * <p/>
     * Don't use in {@link Conference.Companion#ofSessions)} as long as {@link #relStartTime} is supported.
     * See: <a href="https://github.com/EventFahrplan/EventFahrplan/commit/5a4022b00434700274a824cc63f6d54a18b06fac">5a402</a>
     */
    public Moment getStartsAt() {
        if (dateUTC <= 0) {
            throw new IllegalArgumentException("Field 'dateUTC' must be more than 0.");
        }
        return Moment.ofEpochMilli(dateUTC);
    }

    /**
     * Returns a moment based on summing up the start time milliseconds and the duration.
     */
    @NonNull
    public Moment getEndsAt() {
        return Moment.ofEpochMilli(dateUTC + (long) duration * MILLISECONDS_OF_ONE_MINUTE);
    }

    @SuppressWarnings("RedundantIfStatement")
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Session session = (Session) o;

        if (!ObjectsCompat.equals(feedbackUrl, session.feedbackUrl)) return false;
        if (dayIndex != session.dayIndex) return false;
        if (duration != session.duration) return false;
        if (recordingOptOut != session.recordingOptOut) return false;
        if (startTime != session.startTime) return false;
        if (!ObjectsCompat.equals(dateText, session.dateText)) return false;
        if (!ObjectsCompat.equals(language, session.language)) return false;
        if (!sessionId.equals(session.sessionId)) return false;
        if (!ObjectsCompat.equals(recordingLicense, session.recordingLicense)) return false;
        if (!ObjectsCompat.equals(roomName, session.roomName)) return false;
        if (!ObjectsCompat.equals(roomIdentifier, session.roomIdentifier)) return false;
        if (!ObjectsCompat.equals(speakers, session.speakers)) return false;
        if (!ObjectsCompat.equals(subtitle, session.subtitle)) return false;
        if (!title.equals(session.title)) return false;
        if (!ObjectsCompat.equals(track, session.track)) return false;
        if (!ObjectsCompat.equals(type, session.type)) return false;
        if (dateUTC != session.dateUTC) return false;
        if (!ObjectsCompat.equals(timeZoneOffset, session.timeZoneOffset)) return false;

        return true;
    }

    @Override
    public int hashCode() {
        int result = title.hashCode();
        result = 31 * result + ObjectsCompat.hashCode(subtitle);
        result = 31 * result + ObjectsCompat.hashCode(feedbackUrl);
        result = 31 * result + dayIndex;
        result = 31 * result + ObjectsCompat.hashCode(roomName);
        result = 31 * result + ObjectsCompat.hashCode(roomIdentifier);
        result = 31 * result + startTime;
        result = 31 * result + duration;
        result = 31 * result + ObjectsCompat.hashCode(speakers);
        result = 31 * result + ObjectsCompat.hashCode(track);
        result = 31 * result + sessionId.hashCode();
        result = 31 * result + ObjectsCompat.hashCode(type);
        result = 31 * result + ObjectsCompat.hashCode(language);
        result = 31 * result + ObjectsCompat.hashCode(dateText);
        result = 31 * result + ObjectsCompat.hashCode(recordingLicense);
        result = 31 * result + (recordingOptOut ? 1 : 0);
        result = 31 * result + (int) dateUTC;
        result = 31 * result + ObjectsCompat.hashCode(timeZoneOffset);
        return result;
    }

    /**
     * Returns a new session with {@link #changedIsCanceled} set to {@code true}
     * and all other change flags set to {@code false}.
     */
    public Session cancel() {
        Session session = new Session(this);
        session.changedIsCanceled = true;
        session.changedTitle = false;
        session.changedSubtitle = false;
        session.changedRoomName = false;
        session.changedDayIndex = false;
        session.changedSpeakers = false;
        session.changedRecordingOptOut = false;
        session.changedLanguage = false;
        session.changedTrack = false;
        session.changedIsNew = false;
        session.changedStartTime = false;
        session.changedDuration = false;
        return session;
    }

    @SuppressWarnings("BooleanMethodIsAlwaysInverted")
    public boolean isChanged() {
        return changedDayIndex || changedDuration ||
                changedLanguage || changedRecordingOptOut ||
                changedRoomName || changedSpeakers || changedSubtitle ||
                changedStartTime || changedTitle || changedTrack;
    }

}
